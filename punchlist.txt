
RANDOM CHUNKS OF PROSE

Write a simple narrative describing use of OSCAL

OSCAL is a world of controls, which cluster together in groups and within other ('higher level') controls. Controls come in different types but they all have the same basic form. They probably have titles and almost certainly have some normative language, called the "description" of the control (or sometimes just the "control"). Additionally they have one or more *properties* and *statements*, which provide structured information associated with the control. Exactly which properties and statements are present or available for a control, will depend on the particular control and the control type.

Properties are best thought of as name-value pairs. assigned to a control. So for example a control may have a property 'RATING' (or 'rating') that assigns a nominal rating to a control, permitting controls in a set to be sorted and filtered by rating. The "rating" of any control will be a single value (as this is a property), a string albeit sometimes embellished a little (parameters are described below).

Statements, in contrast, are best thought of as chunks or globs or hunks of prose, of arbitrary length. (Special-purpose statements may be short but some controls use statements to help keep the description short, i.e. for 'spillover'.) They may have internal structure, or they may be simply soup or piles of paragraphs and lists. (OSCAL borrows from HTML to keep the markup inside statements familiar.) Like properties, they might be enhanced (parameters again) in certain ways, but they will generally be fairly free form.

The 'description' of a control might indeed be considered a special or privileged kind of statement, even as its title is a kind of property. For the most part, however, OSCAL permits catalogs and profiles to define their own properties, property values, and statements, for whatever purposes they might need.


Parameters

Escape hatch: 'wait list' statements (i.e. no assigned role)

Control enhancements (subcontrols)

Declarations

Adaptability

The rules that define control types can be changed, and new control types can be introduced. Organizations can share control types and share information defined and described using them - that is, as "controls".

(It should be noted in passing that these are digital data objects or data instances, not actual "controls" in the world -- something ineffable, which the documentation of a control can only represent. But metaphysics and epistemology are not in scope here.)

Interchangeability

OSCAL is an entirely independent semantic 'stack' intended to promote interchange of a particular kind (or pattern) of information, a "control set". As such it can be mapped cleanly to NISO JATS, NLM BITS, NISO STS, DITA, or any other format.



EXTRAS      
o write XSLT to produce RACI chart for (all of) COBIT 5?

x Confirm that OSCAL/sources/800-53 is actual
  
NOT EXTRAS

o Regression testing (for schema, XSLT etc.)
  Requiring authoritative sample docs
    Go / no-go
    Schematron XSpec

feature/closed option in declarations?
declarations/*/*/@when w/ XPath (conditional applicability) 

in SaxonJS demo:
look for ixsl:onchange mode (dynamic rendering)

x XSD pathway
  x RNC -> XSD frame via Trang
  x XSD frame + OSCAL.oscal -> XSD (w/ warnings re disparities) cf xsd-merge-docs.xsl
  o XProc for Trang?
  
  
To do:


Profile support
o implement retrieval (control/subcontrol) by ID
  XSLT to convert "all" and "add" retrieval profile into profile w/ stubs (with params)
    (deprecate 'filter'?)
    (then deselect controls by arbitrary criteria?)
  XSLT to produce resolved collection w/ parameters (and substitutions/additions/mods?) in place
    pass 1: expand profile to contain params for all $control//assign
    pass 2: from profile, produce collection with params in place
            (and other mods e.g. overwrites, additions, mappings or enhancements as given in profile doc)
    3: Display XSLT (1.0?) to show resolved-and-rendered collection in browser
  4. Validate collection against source catalog (Schematron?)
    Does control (subcontrol) exist? (key by ID)
      o do we want a control/@provenance (subcontrol/@prov, prop/@prov) to carry provenance code(s)?
      o declarations/provenance
        <provenance catalog="sp800-53-oscal.xml" code="sp800-53/>
    Is title changed /varied as compared to catalog?
    Are properties aligned with their stated provenance?
    How about links? (auto-generate links to sourced catalog controls?)
    Are parameters covered? (hook in present oscal-assign.sch)
    Other profile constraints?

o OSCAL framework in oXygen (nice to have) 
  oXygen macros, boilerplate and auto-insert
  e.g. parameter names by reference to declarations

x collapse features and statements:
  x eliminate statements
  x add declarations for paras
  x prohibit prop/* (properties should be text only)
  x permit prose in features
  o rename stmts as comps
    x SP800-53
    x ISO27002
    o COBIT5
  o Update conversion scripts
    o SP800-53
      o (also see below for enhance2.xsl)
    x ISO27002
      x as-comp
      x w/ text obfuscation?
  x CSS
    x added support for component|comp
    x test
    o remove support of statement|stmt|feature|feat
  x other Schematrons? (global search for 'stmt|statement')
    o remove support of statement|stmt|feature|feat here too

o revisit OSCAL validations only after models restabilize
o validate against their (new) declarations:
  o SP800-53
  o ISO27002
  o COBIT5

Declarations support (desiderata: these could go on github)
  o Validate links by @rel
  o Validate paras by @class
  o Add declarations/*/xsd-type w/ support
    o to property|parameter declarations (not comp|paragraph)
  o Add declarations/component/strict w/ support (prohibits 'free' components i.e. w/o declarations)
    o otherwise, relax declarations: not declaring something is not an error
    o test this!
  o Add declarations/*/*/@when for qualified assertion (on required|singleton|value|regex|strict )
    o implement via eval (be sure and test against broken XPath!)
  o Adjust 'value' logic to mitigate whitespace problems (when indented) - xml:space='preserve'?

o experiment (again) w/ semantic aliases for feat[@class='objectives'] etc
x add declarations for paragraph[@class]
  o test!

o Implement parameter support in editor
  o update OSCAL-assign.sch to @target -> @id (from @use)
  o transformation sequence for display
  
o write readme for SP800-53 documenting how to perform extraction from sources
x same for ISO 27002
  o (w/ pointer to updated mapping)
o same for COBIT5 (w/ mapping)

x write XProc for SP800-53 extraction two-step and wire up
  x Now three steps!
  o refine/reduce pipeline once models have stabilized
    (since as of now, mappings are indirect)

SP800-53 (further) adjustments - enhance2.xsl
x remove link contents
x rename @class[.='number'] to 'name'
x add assign/@id
x improve ID syntax

o make little display stylesheet for SP800-53 (emulate PDF? :-)
  o wire up, run and document on github readme.md


x rename 'feat' to 'comp'

x introduce content obfuscation support into ISO27002 extraction
  o via runtime parameter?

o tomorrow Thu Aug 17 visualize / recognize / gratefulness same as Aug 16 i.e. live with similar consciousness/faith

o argument for overloading 'p'?

