<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://csrc.nist.gov/ns/oscal/1.0" xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <!--
    We can have a catalog, or we can have only declarations for catalogs, or we can have a framework
    (which is kind of a 'catalog mockup' format)
  -->
  <xs:complexType name="catalog-contents">
    <xs:sequence>
      <xs:element ref="oscal:title"/>
      <xs:element minOccurs="0" ref="oscal:declarations"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:section"/>
        <xs:group ref="oscal:group"/>
        <xs:element ref="oscal:control"/>
      </xs:choice>
      <xs:element minOccurs="0" ref="oscal:references"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="framework-contents">
    <xs:sequence>
      <xs:element ref="oscal:title"/>
      <xs:element minOccurs="0" ref="oscal:declarations"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:section"/>
        <xs:group ref="oscal:category"/>
        <xs:element ref="oscal:component"/>
      </xs:choice>
      <xs:element minOccurs="0" ref="oscal:references"/>
    </xs:sequence>
  </xs:complexType>
  <!-- 'worksheet' is just an alias for 'framework' for now -->
  <xs:complexType name="worksheet-contents">
    <xs:sequence>
      <xs:element ref="oscal:title"/>
      <xs:element minOccurs="0" ref="oscal:declarations"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:section"/>
        <xs:group ref="oscal:category"/>
        <xs:element ref="oscal:component"/>
      </xs:choice>
      <xs:element minOccurs="0" ref="oscal:references"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="catalog" type="oscal:catalog-contents"/>
  <xs:element name="framework">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="oscal:framework-contents">
          <xs:attribute name="id" type="xs:ID"/>
          <xs:attributeGroup ref="oscal:optionalClass"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="worksheet">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="oscal:worksheet-contents">
          <xs:attribute name="id" type="xs:ID"/>
          <xs:attributeGroup ref="oscal:optionalClass"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!--
    'group' is the element name as it appears in both frameworks, and catalogs
    but they group different things
  -->
  <xs:group name="category">
    <xs:sequence>
      <xs:element name="group">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" ref="oscal:title"/>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="oscal:prop"/>
              <xs:element ref="oscal:link"/>
              <xs:group ref="oscal:prose"/>
            </xs:choice>
            <xs:choice>
              <xs:group maxOccurs="unbounded" ref="oscal:category"/>
              <xs:element maxOccurs="unbounded" ref="oscal:component"/>
            </xs:choice>
          </xs:sequence>
          <xs:attribute name="id" type="xs:ID"/>
          <xs:attributeGroup ref="oscal:optionalClass"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="component">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="oscal:param"/>
          <xs:element ref="oscal:prop"/>
          <xs:element ref="oscal:link"/>
          <xs:group ref="oscal:prose"/>
          <xs:element ref="oscal:part"/>
        </xs:choice>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:component"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- an overlay - a framework whose structure matches the catalog? -->
  <!--
    frameworks contain categories or items
    categories contain categories or items
    items contain title?, prop*, p*, link*
    strict governance over item/link/@rel
    declarations too :-)
    validation can ensure that framework links are scoped
    corresponding with catalogs/controls included in the profile
  -->
  <!--
    declarations includes declarations for control types, parameters (names/types),
    authorities (source data for transclusion etc. etc.)
  -->
  <xs:element name="declarations">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="oscal:decls">
          <xs:attributeGroup ref="oscal:hrefAttr"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="decls">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="oscal:declare-prop"/>
      <xs:element ref="oscal:declare-part"/>
      <xs:element ref="oscal:declare-p"/>
      <xs:element ref="oscal:declare-link"/>
    </xs:choice>
  </xs:complexType>
  <!--
    parameter declarations expose names and default values for parameters within the control type
    XXX not implemented: for now, parameters are declared implicitly (i.e. in use)
    We can add this (w/ support for it) when we wish to constrain them at the OSCAL layer
  -->
  <!--
    parameter_decl =
    element declare-param { requiredClass, contextAttr, singleton?, desc, \default? }
  -->
  <!-- property may contain only id, only regex, both id and regex, or (sequence of) values -->
  <xs:element name="declare-prop">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:singleton"/>
        <xs:element minOccurs="0" ref="oscal:required"/>
        <xs:element minOccurs="0" ref="oscal:identifier"/>
        <xs:choice>
          <xs:element ref="oscal:regex"/>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:calc"/>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:value"/>
        </xs:choice>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:requiredClass"/>
      <xs:attributeGroup ref="oscal:contextAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="identifier">
    <xs:complexType/>
  </xs:element>
  <!--
    part declaration
    add 'purpose', 'guidance' etc.
  -->
  <xs:element name="declare-part">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:singleton"/>
        <xs:element minOccurs="0" ref="oscal:required"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:requiredClass"/>
      <xs:attributeGroup ref="oscal:contextAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- paragraph declaration -->
  <xs:element name="declare-p">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:singleton"/>
        <xs:element minOccurs="0" ref="oscal:required"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:requiredClass"/>
      <xs:attributeGroup ref="oscal:contextAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- link declaration -->
  <xs:element name="declare-link">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:singleton"/>
        <xs:element minOccurs="0" ref="oscal:required"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:relAttr"/>
      <xs:attributeGroup ref="oscal:contextAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="singleton">
    <xs:complexType/>
  </xs:element>
  <xs:element name="required">
    <xs:complexType/>
  </xs:element>
  <!--
    on 'property and possibly 'parameter',
    element limit { requiredClass, text } w/ @type= upper-bound-inclusive, lower-bound-exclusive, (w/ inclusive/exclusive etc.)
  -->
  <xs:element name="regex" type="xs:string"/>
  <xs:element name="value" type="xs:string"/>
  <xs:element name="calc">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:inherit"/>
        <xs:element ref="oscal:autonum"/>
      </xs:choice>
      <xs:attribute ref="xml:space"/>
    </xs:complexType>
  </xs:element>
  <!-- empty element because it represents a value to be calculated -->
  <xs:element name="inherit">
    <xs:complexType>
      <xs:attribute name="from"/>
    </xs:complexType>
  </xs:element>
  <!-- this time the text content gives the format of the calculated number -->
  <xs:element name="autonum" type="xs:string"/>
  <!--
    done with declarations - controls, subcontrols and groups are not declared
    (constrained) at the OSCAL layer so they don't get declaration elements.
  -->
  <!-- Now for the contents of the OSCAL doc proper ... -->
  <xs:element name="section">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="oscal:title"/>
        <xs:group ref="oscal:prose"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="oscal:section"/>
          <xs:group ref="oscal:group"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!--
    groups may contain more groups, controls or subcontrols
    But controls should not appear in controls (even grouped)
    And subcontrols must not appear without control ancestors
    ... these constraints validated w/ Schematron
  -->
  <xs:group name="group">
    <xs:sequence>
      <xs:element name="group">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" ref="oscal:title"/>
            <xs:group ref="oscal:control-components"/>
            <xs:choice maxOccurs="unbounded">
              <xs:group ref="oscal:group"/>
              <xs:element ref="oscal:control"/>
            </xs:choice>
            <xs:element minOccurs="0" ref="oscal:references"/>
          </xs:sequence>
          <xs:attribute name="id" type="xs:ID"/>
          <xs:attributeGroup ref="oscal:optionalClass"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <!-- note prose is not included in control-components, unlike item pattern ('component' element) -->
  <xs:group name="control-components">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:prop"/>
        <xs:group ref="oscal:anyKindofPart"/>
        <xs:element ref="oscal:link"/>
        <xs:element ref="oscal:param"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:element name="control">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:group ref="oscal:control-components"/>
          <xs:element ref="oscal:subcontrol"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="subcontrol">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:group ref="oscal:control-components"/>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- Add 'semantic' part types: purpose, guidance, decision, information, remarks (etc) -->
  <xs:group name="anyKindofPart">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:part"/>
    </xs:sequence>
  </xs:group>
  <!--
    see utility.xq for analytic breakdown of part types
    so far: description, guidance
  -->
  <!-- parts are addressable like controls, but can also have prose content -->
  <xs:element name="part">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:group ref="oscal:prose"/>
          <xs:group ref="oscal:control-components"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="title">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:q"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="link">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
      <xs:attributeGroup ref="oscal:relAttr"/>
      <xs:attributeGroup ref="oscal:hrefAttr"/>
    </xs:complexType>
  </xs:element>
  <!--
    param is like its declaration, but simpler
    permits bindings to assign and select elements w/in controls
    i.e. local override of a default assignment in a parameter declaration
    or on-the-fly declaration of new parameters for a control
    (since params are not currently required to be declared
  -->
  <xs:element name="desc">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="param">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="oscal:desc"/>
        <xs:element ref="oscal:value"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="prop">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="oscal:requiredClass"/>
    </xs:complexType>
  </xs:element>
  <!--
    syntax sugar for part[@class='purpose'] for "Objective/s" etc.
    purpose =
      element purpose {
        prose }
  -->
  <!--
    syntax sugar for part[@class='guidance'] for "Supplemental Guidance" etc.
    guidance =
      element guidance {
        prose }
  -->
  <!--
    syntax sugar for part[@class='decision']
    decision =
      element decision {
        prose }
  -->
  <!--
    syntax sugar for part[@class='information'], other-info, etc.
    information =
      element information {
        prose }
  -->
  <!--
    syntax sugar for part[@class='remarks']
    remarks =
      element remarks {
        prose }
  -->
  <xs:group name="prose">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:ul"/>
        <xs:element ref="oscal:ol"/>
        <xs:element ref="oscal:p"/>
        <xs:element ref="oscal:pre"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:element name="references">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:ref"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- JATS-like references -->
  <xs:element name="ref">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:std"/>
        <xs:element ref="oscal:citation"/>
        <xs:group ref="oscal:prose"/>
      </xs:choice>
      <xs:attribute name="id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <!-- analogous to JATS mixed-citation[@citation-type='standard'] or equivalent -->
  <xs:element name="std">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attribute name="href" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <!-- analogous to JATS mixed-citation -->
  <xs:element name="citation">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attribute name="href" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <!-- We can map more html in if/as needed -->
  <xs:element name="p">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:whatnot"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="pre">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attribute name="id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ol">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="li">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:whatnot"/>
        <xs:element ref="oscal:ol"/>
        <xs:element ref="oscal:ul"/>
      </xs:choice>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ul">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- whatnot includes 'semantical' elements along with the inline mix -->
  <xs:group name="whatnot">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:semantical"/>
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!-- note mix does not include anchors, which must be included separately -->
  <xs:group name="mix">
    <xs:sequence>
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="oscal:inlines"/>
    </xs:sequence>
  </xs:group>
  <!-- declaring as zeroOrMore/choice avoids XSD substitution group -->
  <xs:group name="inlines">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:q"/>
        <xs:element ref="oscal:code"/>
        <xs:element ref="oscal:em"/>
        <xs:element ref="oscal:i"/>
        <xs:element ref="oscal:b"/>
        <xs:element ref="oscal:sub"/>
        <xs:element ref="oscal:sup"/>
        <xs:element ref="oscal:span"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:element name="q">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:i"/>
        <xs:element ref="oscal:b"/>
        <xs:element ref="oscal:sub"/>
        <xs:element ref="oscal:sup"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- A bit of code (perhaps capable of evaluation in the correct context) -->
  <xs:element name="code">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="em">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="i">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="b">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="sub">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="sup">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- An arbitrary span -->
  <xs:element name="span">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- Using HTML for this -->
  <xs:element name="a">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:q"/>
        <xs:element ref="oscal:code"/>
        <xs:element name="em">
          <xs:complexType mixed="true">
            <xs:attributeGroup ref="oscal:optionalClass"/>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:attribute name="href"/>
    </xs:complexType>
  </xs:element>
  <!-- not html! -->
  <!-- declaring as zeroOrMore/choice avoids XSD substitution group -->
  <xs:group name="semantical">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:withdrawn"/>
        <xs:element ref="oscal:insert"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!-- A placeholder status report typically with a cross-reference -->
  <xs:element name="withdrawn">
    <xs:complexType mixed="true">
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="oscal:inlines"/>
    </xs:complexType>
  </xs:element>
  <!--
    A value to be assigned by responder via parameter
    (a parameter must be available)
  -->
  <xs:element name="insert">
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="param-id" use="required" type="xs:IDREF"/>
    </xs:complexType>
  </xs:element>
  <!-- A selection to be made by responder - tbd -->
  <!-- select = element select { idAttr?, choice* } -->
  <!--
    Within a selection, a choice - tbd
    unlike 'value', choice may have inline stuff as well as 'assign' elements
    choice = element choice { (assign | mix)* }
  -->
  <!-- IDs are required everywhere for now -->
  <xs:attributeGroup name="idAttr">
    <xs:attribute name="id" use="required" type="xs:ID"/>
  </xs:attributeGroup>
  <!--
    we used to distinguish btw @type and @name the latter for components
    now we overload 'class' every which way
  -->
  <xs:attributeGroup name="requiredClass">
    <xs:attribute name="class" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="optionalClass">
    <xs:attribute name="class"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="contextAttr">
    <xs:attribute name="context" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="relAttr">
    <xs:attribute name="rel"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="hrefAttr">
    <xs:attribute name="href"/>
  </xs:attributeGroup>
</xs:schema>
<!-- requiredClass = attribute name { xsd:NCName } -->
