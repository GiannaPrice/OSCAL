<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://csrc.nist.gov/ns/oscal/1.0" xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0">
  <xs:include schemaLocation="oscal-core.xsd"/>
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <xs:element name="profile">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:element maxOccurs="unbounded" ref="oscal:invoke"/>
        <xs:element minOccurs="0" ref="oscal:framework"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="invoke">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:include"/>
        <xs:element minOccurs="0" ref="oscal:exclude"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:hrefAttr"/>
      <xs:attributeGroup ref="oscal:idAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- Can have both 'all' and 'call' to switch up with-subcontrol settings -->
  <xs:element name="include">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:all"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="oscal:call"/>
          <xs:element ref="oscal:param"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- for capturing overwritten values -->
  <xs:element name="default" type="xs:string"/>
  <!--
    Move params to a separate 'set' element?
    Logic: params override params given in source catalogs or profiles
    but they apply only to controls included.
    parameters not belonging to included controls/subcontrols might be filtered out of 'set'
    applicable parameters in 'set' might remain
    expansion logic could also provide set/param for any param not already represented
  -->
  <!-- 'all' or 'filter' make sense for inclusions but not exclusions -->
  <xs:element name="exclude">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:call"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Only 'yes' should have any effect; processors should assume 'no' when implicit -->
  <xs:element name="all">
    <xs:complexType>
      <xs:attributeGroup ref="oscal:withSubContrlsAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="withSubContrlsAttr">
    <xs:attribute name="with-subcontrols">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
          <xs:enumeration value="no"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    'call' can call *either* a control or a subcontrol by its @id
    Schematron requirement: there exists in the catalog a control or subcontrol
    by the given @id
  -->
  <xs:element name="call">
    <xs:complexType>
      <xs:attributeGroup ref="oscal:withSubContrlsAttr"/>
      <xs:attribute name="control-id"/>
      <xs:attribute name="subcontrol-id"/>
    </xs:complexType>
  </xs:element>
  <!-- not used ... for experimental feature -->
  <xs:element name="filter">
    <xs:complexType mixed="true">
      <xs:attribute name="key" use="required"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
