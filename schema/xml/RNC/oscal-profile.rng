<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="http://csrc.nist.gov/ns/oscal/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <include href="oscal-core.rng">
    <start>
      <choice>
        <ref name="profile"/>
        <ref name="framework"/>
      </choice>
    </start>
  </include>
  <define name="profile">
    <element name="profile">
      <ref name="idAttr"/>
      <ref name="title"/>
      <oneOrMore>
        <ref name="invoke"/>
      </oneOrMore>
      <optional>
        <ref name="framework"/>
      </optional>
    </element>
  </define>
  <define name="invoke">
    <element name="invoke">
      <ref name="hrefAttr"/>
      <ref name="idAttr"/>
      <group>
        <optional>
          <ref name="include"/>
        </optional>
        <optional>
          <ref name="exclude"/>
        </optional>
      </group>
      <choice>
        <ref name="param"/>
        <ref name="alteration"/>
      </choice>
    </element>
  </define>
  <!-- Can have both 'all' and 'call' to switch up with-subcontrol settings -->
  <define name="include">
    <element name="include">
      <choice>
        <ref name="all"/>
        <oneOrMore>
          <ref name="call"/>
        </oneOrMore>
      </choice>
    </element>
  </define>
  <!-- for capturing overwritten values -->
  <define name="default">
    <element name="default">
      <text/>
    </element>
  </define>
  <!--
    Move params to a separate 'set' element?
    Logic: params override params given in source catalogs or profiles
    but they apply only to controls included.
    parameters not belonging to included controls/subcontrols might be filtered out of 'set'
    applicable parameters in 'set' might remain
    expansion logic could also provide set/param for any param not already represented
  -->
  <!-- 'all' or 'filter' make sense for inclusions but not exclusions -->
  <define name="exclude">
    <element name="exclude">
      <oneOrMore>
        <ref name="call"/>
      </oneOrMore>
    </element>
  </define>
  <!-- Only 'yes' should have any effect; processors should assume 'no' when implicit -->
  <define name="all">
    <element name="all">
      <ref name="withSubContrlsAttr"/>
    </element>
  </define>
  <define name="withSubContrlsAttr">
    <optional>
      <attribute name="with-subcontrols">
        <choice>
          <value>yes</value>
          <value>no</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!--
    'call' can call *either* a control or a subcontrol by its @id
    Schematron requirement: there exists in the catalog a control or subcontrol
    by the given @id
  -->
  <define name="call">
    <element name="call">
      <choice>
        <group>
          <ref name="withSubContrlsAttr"/>
          <attribute name="control-id"/>
        </group>
        <attribute name="subcontrol-id"/>
      </choice>
    </element>
  </define>
  <!-- not used ... for experimental feature -->
  <define name="filter">
    <element name="filter">
      <attribute name="key"/>
      <text/>
    </element>
  </define>
  <define name="alteration">
    <element name="change">
      <choice>
        <attribute name="control-id"/>
        <attribute name="subcontrol-id"/>
      </choice>
      <optional>
        <ref name="remove"/>
      </optional>
      <optional>
        <ref name="augment"/>
      </optional>
    </element>
  </define>
  <define name="remove">
    <element name="remove">
      <attribute name="targets">
        <data type="NMTOKENS"/>
      </attribute>
    </element>
  </define>
  <define name="augment">
    <element name="augment">
      <zeroOrMore>
        <choice>
          <ref name="prop"/>
          <ref name="anyKindofPart"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
</grammar>
