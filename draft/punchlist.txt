Issues / questions ISO 27001/2 analysis

x Information capture options (we'll start with EPUB)
  David inquiring re: ISO STS option

x Surrounding materials (intro/front matter etc etc) - out of scope? (yes, for now: DW)

x 'description' will be normative - every control must have this element
x add control/@type
x so 'control' has at least (title, description)
x map ISO stuff in!
x We need some sort of (nested) div structure for document structure
  e.g. clause, family

x rename nested catalog as 'group' (DW)

===

Since last check in:
  implemented declarations/control-spec w/ property, statement declarations
    schema, Schematron (implementation), test data
  tagged assign, select, withdraw elements in SP800-53 data
  CSS for same
  More CSS and schema enhancements
  Testing XSD pathway including docs
  Documentation (oscal-oscal.xml)
  Extended to inline <code>, <q>

o merge 'implementation' sections from 800-53A (PDF!) into draft control

x xrefs and linking
  We are linking using a simple web-friendly notation. An href is a URL,
  adopting the # notation for internal (id) references.
  Note that @id is subject to rewrite by an application! so a robust
    linking mechanism under OSCAL would rely on controlled properties
    not (solely) on href plus they could be cross-checked against each other
    (binding+lock mechanism for linking)
  
x induction of implicit cross-references from SP800-53?
  e.g. inside supplemental guidance

x Implement parameters
   w/ parameter declarations?

o pull in more data from PDFs e.g. in 800-53 control enhancements
  Maybe do all of section AC (account controls)
o presentational XSLT (PDF?) for cross-checking / proofing

o "Media Protection" section (passim!)

XSLT
  x implement bells and whistles
    x e.g. headers (titles) for statements, properties
    x runins for numbering
  filtered views e.g. all assignments, selections

x Define an ID assignment protocol and add IDs?
    o implement as refactoring XSLT?
      taking numbering format as runtime parameter?!

Implement 'assign' checking as Schematron (specific to catalog / control types)
  checks against normative versions in the background!?
Implement 'select' checking as detecting any select without selected/
  select/selected/choice
  select/available/choice

o 'preamble' section including declarations
    x control-spec (describing the structure of a control)
    x param-spec (naming permissible/recognized parameters)
    o authority (referencing external authorities / sources)
x implement PDF production pipeline
x implement XSLT 1.0 (client side) runtime resolution/display

LAYERED VALIDATION MODEL
  0. element grammar
  1. OSCAL constraints (what makes a control catalog in OSCAL terms)
  2. OSCAL customization constraints (profile-level)
  3. implicit/runtime/'culture' constraints (implementation-level)

All of these can be demonstrated in a prototype/PoC

Runtime declarations?
  x parameter value assignments
  o semantic associations / merge-map?
    (e.g. formal mappings between control properties)

  
inside declarations:
  x control-spec { @type, parameter-spec*, statement-spec*, authority* )
    x expansion for run-in label?
      (so you can say to promote prop[@name='number'] into the control title for display)
    x add prop/runin <runin/> to <id/><regex/><value/> indicating run-in display of property
    x also added title as alternative
  x parameter including lexical contraints
  x statement-spec
    x expansions e.g. to provide header "Other considerations" to stmt[@type='other-considerations']"
  o authority (binding to external resource or copy)
      stipulates local handle (@id) 


NEXT UP
  o Make CSS filtering down to select/choice and assign values?

  x Make XSLT running (various) substitutions
  x Another XSLT produces a set of declarations from a group of controls (adapt from mapper)
    x also produced declarations for ISO20002

Every profile is based on a catalog or multiple catalogs. A catalog is indeed (in one respect) nothing more than a "standalone" profile, that is, a profile that makes reference to no catalog but itself. We distinguish a catalog from a profile in use mainly because we hope we don't have to start from scratch; we generally base our work on earlier work or at least make reference to it - hence we are less interested in making a new catalog from scratch, than in creating a profile of (documenting a relation with) a catalog provided as a reference. Nonetheless, catalogs and profiles are made from the same stuff: the difference is in how we are using it.

We expect to have standard catalogs, so we don't have to produce them from scratch -- whereas we also expect we need to be able to do our own thing, hence the need for profiling.

With respect to content models, catalogs and profiles are isomorphic except wrt the presence of element 'authority'. One way to produce a profile (a 'null' profile ready for editing) of a given catalog, is to rename 'catalog' to 'profile' and add 'authority' pointing to the original catalog. (There are better ways to do this but it works.)

Hence, in schema validation, 'catalog' and 'profile' are synonymous, with their difference in application asserted in Schematron.

o Also declarations of properties/statements on groups (again by type)

modeling 'selections' via XML containment <select><alternative></></>

Anything called @id must be lexically unique in document scope!
Combined with /*/@id (document @id) should be unique across a document collection


What sorts of things do we need to validate at the level of a control?
  Properties and statements that (may|must) appear
  Lexical form of properties
    x enumerated list
    x regex
    * numbering semantics (xsl:number?)
    * referential integrity (co-occurrence constraints)
      e.g. if in section "Access Control" then ID must start 'AC' ...

x XSLT to rip catalog declarations from a catalog
oXygen Author CSS
pull-downs for properties and statement types inside various controls (e.g.)

oXygen macros, boilerplate and auto-insert
  e.g. parameter names by reference to declarations

x remove sequence, clause, control-group properties (or anything so redundant)

  Model must enable auto-production of Schematron per profile?

x Run Trang and debug XSD (yay!)

o rendering XSLT to make a pretty page display (or PDF?)

Thurs Jun 15
  Review parameters design w/ David
  Question re: declarations for group (not control) properties and statements?
    (Flat, or nested?)
  Check on progress e.g SP800-53A

GOALS for next checkpoint
o Complete and valid mappings for both sources
o CSS for oXygen display
o functioning RNC and Schematron
???

x first cut at XSD?
o embed documentation (and stage documentation pipeline?)

o validate (properties and paramters?) upper-bound, lower-bound, (w/ inclusive/exclusive etc.)
o enforce uniqueness of param/@name (or @id?)
o refactor declarations
   properties and statements at the top
   distinguish between validation and substitution rules?
Change @name to @type and remove control/@type
Model control enhancements inside controls?
  (Flag to indicate its an enhancement?)

o consider the mapping to unify 800-53 and ISO 27002?
o prototype profiling mechanism
     Assume operator has a list of controls to include
        (including enhancements with containing controls)
     Also demo producing a profile by selection (e.g. baseline-impact)
     
What I did Friday
  Met Dave 1 hour
  wrote plannign email 1 hr
  from 2pm - 5:30 (3 hrs)
  Turned declarations structure upside down
    all declarations are now at top level
    matching happens by stipulating '@where' w/ match to either @type or local-name()
    (e.g. 'control' or 'group')
  Renamed @name to @handle everywhere
  Built plumbing to support retrieval w/ new declarations matching
  Ripped out 'display' features of declarations (we'll move this to a different layer)
  Updated SP800-53 and ISO 27002 samples to new schema
    (declarations and content)

Next up - finish mapping samples and XSLT pipelines for samples to date
Then turn to 800-53A
Also, update XSLTs and CSSs ...
