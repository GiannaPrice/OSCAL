Issues / questions ISO 27001/2 analysis

x Information capture options (we'll start with EPUB)
  David inquiring re: ISO STS option

x Surrounding materials (intro/front matter etc etc) - out of scope? (yes, for now: DW)

x 'description' will be normative - every control must have this element
x add control/@type
x so 'control' has at least (title, description)
x map ISO stuff in!
x We need some sort of (nested) div structure for document structure
  e.g. clause, family

x rename nested catalog as 'group' (DW)

===

Since last check in:
  implemented declarations/control-spec w/ property, statement declarations
    schema, Schematron (implementation), test data
  tagged assign, select, withdraw elements in SP800-53 data
  CSS for same
  More CSS and schema enhancements
  Testing XSD pathway including docs
  Documentation (oscal-oscal.xml)
  Extended to inline <code>, <q>

o merge 'implementation' sections from 800-53A (PDF!) into draft control

x xrefs and linking
  We are linking using a simple web-friendly notation. An href is a URL,
  adopting the # notation for internal (id) references.
  Note that @id is subject to rewrite by an application! so a robust
    linking mechanism under OSCAL would rely on controlled properties
    not (solely) on href plus they could be cross-checked against each other
    (binding+lock mechanism for linking)
  
x induction of implicit cross-references from SP800-53?
  e.g. inside supplemental guidance

x Implement parameters
   w/ parameter declarations?

o pull in more data from PDFs e.g. in 800-53 control enhancements
  Maybe do all of section AC (account controls)
o presentational XSLT (PDF?) for cross-checking / proofing

o "Media Protection" section (passim!)

XSLT
  x implement bells and whistles
    x e.g. headers (titles) for statements, properties
    x runins for numbering
  filtered views e.g. all assignments, selections

x Define an ID assignment protocol and add IDs?
    o implement as refactoring XSLT?
      taking numbering format as runtime parameter?!

Implement 'assign' checking as Schematron (specific to catalog / control types)
  checks against normative versions in the background!?
Implement 'select' checking as detecting any select without selected/
  select/selected/choice
  select/available/choice

o 'preamble' section including declarations
    x control-spec (describing the structure of a control)
    x param-spec (naming permissible/recognized parameters)
    o authority (referencing external authorities / sources)
x implement PDF production pipeline
x implement XSLT 1.0 (client side) runtime resolution/display

LAYERED VALIDATION MODEL
  0. element grammar
  1. OSCAL constraints (what makes a control catalog in OSCAL terms)
  2. OSCAL customization constraints (profile-level)
  3. implicit/runtime/'culture' constraints (implementation-level)

All of these can be demonstrated in a prototype/PoC

Runtime declarations?
  x parameter value assignments
  o semantic associations / merge-map?
    (e.g. formal mappings between control properties)

  
inside declarations:
  x control-spec { @type, parameter-spec*, statement-spec*, authority* )
    x expansion for run-in label?
      (so you can say to promote prop[@name='number'] into the control title for display)
    x add prop/runin <runin/> to <id/><regex/><value/> indicating run-in display of property
    x also added title as alternative
  x parameter including lexical contraints
  x statement-spec
    x expansions e.g. to provide header "Other considerations" to stmt[@type='other-considerations']"
  o authority (binding to external resource or copy)
      stipulates local handle (@id) 


NEXT UP
  o Make CSS filtering down to select/choice and assign values?

  x Make XSLT running (various) substitutions
  x Another XSLT produces a set of declarations from a group of controls (adapt from mapper)
    x also produced declarations for ISO20002

Every profile is based on a catalog or multiple catalogs. A catalog is indeed (in one respect) nothing more than a "standalone" profile, that is, a profile that makes reference to no catalog but itself. We distinguish a catalog from a profile in use mainly because we hope we don't have to start from scratch; we generally base our work on earlier work or at least make reference to it - hence we are less interested in making a new catalog from scratch, than in creating a profile of (documenting a relation with) a catalog provided as a reference. Nonetheless, catalogs and profiles are made from the same stuff: the difference is in how we are using it.

We expect to have standard catalogs, so we don't have to produce them from scratch -- whereas we also expect we need to be able to do our own thing, hence the need for profiling.

With respect to content models, catalogs and profiles are isomorphic except wrt the presence of element 'authority'. One way to produce a profile (a 'null' profile ready for editing) of a given catalog, is to rename 'catalog' to 'profile' and add 'authority' pointing to the original catalog. (There are better ways to do this but it works.)

Hence, in schema validation, 'catalog' and 'profile' are synonymous, with their difference in application asserted in Schematron.

o Also declarations of properties/statements on groups (again by type)

modeling 'selections' via XML containment <select><alternative></></>

Anything called @id must be lexically unique in document scope!
Combined with /*/@id (document @id) should be unique across a document collection


What sorts of things do we need to validate at the level of a control?
  Properties and statements that (may|must) appear
  Lexical form of properties
    x enumerated list
    x regex
    * numbering semantics (xsl:number?)
         value/inherit, value/number as dynamic substitution values
    * referential integrity (co-occurrence constraints)
      e.g. if in section "Access Control" then ID must start 'AC' ...

x XSLT to rip catalog declarations from a catalog
oXygen Author CSS
pull-downs for properties and statement types inside various controls (e.g.)

oXygen macros, boilerplate and auto-insert
  e.g. parameter names by reference to declarations

x remove sequence, clause, control-group properties (or anything so redundant)

  Model must enable auto-production of Schematron per profile?

x Run Trang and debug XSD (yay!)

o rendering XSLT to make a pretty page display (or PDF?)
GOALS for next checkpoint
x Complete and valid mappings for both sources
x CSS for oXygen display
x functioning RNC and Schematron
???

o add xsd-type for declaration i.e. <xsd-type>decimal</xsd:type> validates $x castable as xs:decimal

x first cut at XSD?
x embed documentation (and stage documentation pipeline?)

o Question re: implementations
  Our prototype is implemented on an XML stack in oXygen but OSCAL must be platform independent
  (We can also foresee developing on an XML stack off of oXygen, of course.
   XQuery/XForms comes to mind ...)
  So ... what other platforms / stacks can we be looking at?
    Python ... Ruby ... who do we have?
   
o validate (properties and paramters?) upper-bound, lower-bound, (w/ inclusive/exclusive etc.)
  - or - define a mechanism for higher-level validation against such rules
    e.g. an OSCAL that converts into a Schematron ...
    cf OSCAL-refinement-OSCAL.xml

x enforce uniqueness of param/@role (or @id?)
x refactor declarations
   properties and statements at the top
   distinguish between validation and substitution rules?
x Change @name to @type and remove control/@type (no: now @role)

Model control enhancements inside controls?
  (Flag to indicate its an enhancement?)

o consider the mapping to unify 800-53 and ISO 27002?
    issues:
      hierarchical alignment?
        (tool: head to head hierarchical comparison of catalogs / profiles
o       "Profile sketch" XSLT that produces hierarchical analysis in XML and SVG)
o       Mapping of controls w/ their properties and statements (easy to see in declarations)
      
o prototype profiling mechanism
     Assume operator has a list of controls to include
        (including control enhancements or subcontrols, with containing controls)
     Also demo producing a profile by selection/filtering (e.g. baseline-impact)

For Dave - group is good but should we permit control/control (eg 800-53A)

High level issues (group to discuss?)
  Setting names of elements and attributes
  Defining when a new schema must be layered over
    (e.g. new element types for privileged statements)
    also control points for that layering (in both RNG and XSD versions)

Write a simple narrative describing use of OSCAL

OSCAL is a world of controls, which cluster together in groups and within other ('higher level') controls. Controls come in different types but they all have the same basic form. They probably have titles and almost certainly have some normative language, called the "description" of the control (or sometimes just the "control"). Additionally they have one or more *properties* and *statements*, which provide structured information associated with the control. Exactly which properties and statements are present or available for a control, will depend on the particular control and the control type.

Properties are best thought of as name-value pairs. assigned to a control. So for example a control may have a property 'RATING' (or 'rating') that assigns a nominal rating to a control, permitting controls in a set to be sorted and filtered by rating. The "rating" of any control will be a single value (as this is a property), a string albeit sometimes embellished a little (parameters are described below).

Statements, in contrast, are best thought of as chunks or globs or hunks of prose, of arbitrary length. (Special-purpose statements may be short but some controls use statements to help keep the description short, i.e. for 'spillover'.) They may have internal structure, or they may be simply soup or piles of paragraphs and lists. (OSCAL borrows from HTML to keep the markup inside statements familiar.) Like properties, they might be enhanced (parameters again) in certain ways, but they will generally be fairly free form.

The 'description' of a control might indeed be considered a special or privileged kind of statement, even as its title is a kind of property. For the most part, however, OSCAL permits catalogs and profiles to define their own properties, property values, and statements, for whatever purposes they might need.

All properties and statements are assigned *roles*, which must be distinctive within the control. That is, if a control has a property whose role is to be the "number", no other property or statement may be assigned that role. (To the same control. Other controls may have their own numbers especially if they are the same type as this one.) This means there is always a one-to-one relationship between (any given) property values, and the controls they describe -- a constraint that simplifies queries for controls, since we can know ahead of time that any control can have only a single 'name' or 'number' or 'blodget'. (If we have cases where we need many-to-many key relations, in OSCAL, we will do that not with properties or statements, but subcontrols.)

The "tailoring" or adaptation of controls generally entails adding or overwriting statements and properties given in control catalogs, as well as combining controls (with properties providing links to base controls, etc.) into new controls and control sets.

Parameters

Escape hatch: 'wait list' statements (i.e. no assigned role)

Control enhancements (subcontrols)

Declarations

Adaptability

The rules that define control types can be changed, and new control types can be introduced. Organizations can share control types and share information defined and described using them - that is, as "controls".

(It should be noted in passing that these are digital data objects or data instances, not actual "controls" in the world -- something ineffable, which the documentation of a control can only represent. But metaphysics and epistemology are not in scope here.)

Interchangeability

OSCAL is an entirely independent semantic 'stack' intended to promote interchange of a particular kind (or pattern) of information, a "control set". As such it can be mapped cleanly to NISO JATS, NLM BITS, NISO STS, DITA, or any other format.
