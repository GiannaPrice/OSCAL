<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="http://scap.nist.gov/schema/oscal" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!-- We can have a catalog, or we can have only declarations for catalogs -->
  <start>
    <choice>
      <ref name="catalog"/>
      <ref name="declarations"/>
      <ref name="profile"/>
      <ref name="collection"/>
    </choice>
  </start>
  <!-- Also we have an alias for 'catalog', namely 'collection', used for ad-hoc collections of controls -->
  <!--
    start = element oscal-catalog { declarations, catalog } 
    have initial sections
    declare   - declares local parameters and settings including constraints on controls
                (enumerated values for properties, regexes and what not)
    also declares bindings to authorities (e.g. sources for transclusion/comparison)?
  -->
  <!-- keeping these together until we have differentiating requirements -->
  <define name="collection-contents">
    <ref name="title"/>
    <optional>
      <ref name="declarations"/>
    </optional>
    <zeroOrMore>
      <ref name="section"/>
    </zeroOrMore>
    <choice>
      <oneOrMore>
        <ref name="group"/>
      </oneOrMore>
      <oneOrMore>
        <ref name="control"/>
      </oneOrMore>
    </choice>
    <zeroOrMore>
      <ref name="section"/>
    </zeroOrMore>
    <optional>
      <ref name="references"/>
    </optional>
  </define>
  <define name="catalog">
    <element name="catalog">
      <ref name="collection-contents"/>
    </element>
  </define>
  <define name="collection">
    <element name="collection">
      <ref name="collection-contents"/>
    </element>
  </define>
  <!--
    declarations includes declarations for control types, parameters (names/types),
    authorities (source data for transclusion etc. etc.)
  -->
  <define name="declarations">
    <element name="declarations">
      <optional>
        <ref name="hrefAttr"/>
      </optional>
      <ref name="decls"/>
    </element>
  </define>
  <define name="decls">
    <zeroOrMore>
      <choice>
        <ref name="parameter_decl"/>
        <ref name="property_decl"/>
        <ref name="statement_decl"/>
        <ref name="feature_decl"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- parameter declarations expose names and default values for parameters within the control type -->
  <define name="parameter_decl">
    <element name="parameter">
      <ref name="nameAttr"/>
      <ref name="contextAttr"/>
      <optional>
        <ref name="singleton"/>
      </optional>
      <optional>
        <oneOrMore>
          <ref name="choice"/>
        </oneOrMore>
      </optional>
    </element>
  </define>
  <define name="singleton">
    <element name="singleton">
      <empty/>
    </element>
  </define>
  <!-- property may contain only id, only regex, both id and regex, or (sequence of) values -->
  <define name="property_decl">
    <element name="property">
      <ref name="nameAttr"/>
      <ref name="contextAttr"/>
      <optional>
        <ref name="singleton"/>
      </optional>
      <optional>
        <ref name="required"/>
      </optional>
      <optional>
        <element name="identifier">
          <empty/>
        </element>
      </optional>
      <choice>
        <ref name="regex"/>
        <zeroOrMore>
          <ref name="value"/>
        </zeroOrMore>
      </choice>
    </element>
  </define>
  <!--
    on 'property and possibly 'parameter',
    element limit { nameAttr, text } w/ @type= upper-bound-inclusive, lower-bound-exclusive, (w/ inclusive/exclusive etc.)
  -->
  <define name="regex">
    <element name="regex">
      <text/>
    </element>
  </define>
  <define name="value">
    <element name="value">
      <zeroOrMore>
        <choice>
          <ref name="inherit"/>
          <ref name="autonum"/>
          <text/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="inherit">
    <element name="inherit">
      <optional>
        <attribute name="from"/>
      </optional>
      <text/>
    </element>
  </define>
  <define name="autonum">
    <element name="autonum">
      <text/>
    </element>
  </define>
  <!-- statement declaration -->
  <define name="statement_decl">
    <element name="statement">
      <ref name="nameAttr"/>
      <ref name="contextAttr"/>
      <optional>
        <ref name="singleton"/>
      </optional>
      <optional>
        <ref name="required"/>
      </optional>
    </element>
  </define>
  <define name="required">
    <element name="required">
      <empty/>
    </element>
  </define>
  <!-- feature declaration -->
  <define name="feature_decl">
    <element name="feature">
      <ref name="nameAttr"/>
      <ref name="contextAttr"/>
      <optional>
        <ref name="singleton"/>
      </optional>
      <optional>
        <ref name="required"/>
      </optional>
    </element>
  </define>
  <!--
    done with declarations - controls, subcontrols and groups are not declared
    (constrained) at the OSCAL layer so they don't get declaration elements.
  -->
  <!-- Now for the contents of the OSCAL doc proper ... -->
  <!--
    groups may contain more groups, controls or subcontrols
    But controls should not appear in controls (even grouped)
    And subcontrols must not appear without control ancestors
    ... these constraints validated w/ Schematron
  -->
  <define name="group">
    <element name="group">
      <ref name="idAttr"/>
      <ref name="typeAttr"/>
      <optional>
        <ref name="title"/>
      </optional>
      <zeroOrMore>
        <ref name="prop"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="anyKindofStatement"/>
      </zeroOrMore>
      <choice>
        <zeroOrMore>
          <ref name="group"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="control"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="subcontrol"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="feature"/>
        </zeroOrMore>
      </choice>
    </element>
  </define>
  <define name="section">
    <element name="div">
      <ref name="idAttr"/>
      <ref name="typeAttr"/>
      <ref name="title"/>
      <ref name="prose"/>
      <zeroOrMore>
        <ref name="section"/>
      </zeroOrMore>
      <optional>
        <ref name="references"/>
      </optional>
    </element>
  </define>
  <!-- Note prose is permitted directly inside control although it may be forbidden at higher levels -->
  <define name="control">
    <element name="control">
      <ref name="idAttr"/>
      <ref name="typeAttr"/>
      <optional>
        <ref name="title"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="link"/>
          <ref name="param"/>
          <ref name="prop"/>
          <ref name="anyKindofStatement"/>
          <ref name="group"/>
          <ref name="subcontrol"/>
          <ref name="feature"/>
        </choice>
      </zeroOrMore>
      <optional>
        <ref name="references"/>
      </optional>
    </element>
  </define>
  <define name="subcontrol">
    <element name="subcontrol">
      <ref name="idAttr"/>
      <ref name="typeAttr"/>
      <optional>
        <ref name="title"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="link"/>
          <ref name="param"/>
          <ref name="prop"/>
          <ref name="anyKindofStatement"/>
          <ref name="group"/>
          <ref name="feature"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="feature">
    <element name="feat">
      <ref name="idAttr"/>
      <ref name="typeAttr"/>
      <optional>
        <ref name="title"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="link"/>
          <ref name="param"/>
          <ref name="prop"/>
          <ref name="anyKindofStatement"/>
          <ref name="group"/>
          <ref name="feature"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="title">
    <element name="title">
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="q"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!--
    param is like its declaration, but simpler
    permits bindings to assign and select elements w/in controls
    i.e. local override of a default assignment in a parameter declaration
    or on-the-fly declaration of new parameters for a control
    (since params are not currently required to be declared
  -->
  <define name="link">
    <element name="link">
      <ref name="relAttr"/>
      <ref name="hrefAttr"/>
      <ref name="mix"/>
    </element>
  </define>
  <define name="param">
    <element name="param">
      <ref name="idAttr"/>
      <ref name="nameAttr"/>
      <ref name="mix"/>
    </element>
  </define>
  <define name="prop">
    <element name="prop">
      <ref name="nameAttr"/>
      <ref name="whatnot"/>
    </element>
  </define>
  <!-- on prop, not(@name = ../(* except current())/@name) -->
  <define name="plug">
    <empty/>
  </define>
  <!--
    plug is like prop, except it has a type instead of a role (type is not required to be unique)
    plug =
     element plug {
      typeAttr,
      whatnot
    }
  -->
  <define name="desc">
    <element name="desc">
      <ref name="prose"/>
    </element>
  </define>
  <!--
    stmt is a bit of controlled prose: its title is implicit in its name
    e.g. stmt[@name='objectives'] might be displayed with title "Objectives:"
  -->
  <!-- anyKindofStatement = ( stmt | desc | purpose | guidance | information | remarks ) -->
  <define name="anyKindofStatement">
    <ref name="stmt"/>
  </define>
  <define name="stmt">
    <element name="stmt">
      <optional>
        <ref name="nameAttr"/>
      </optional>
      <ref name="prose"/>
      <zeroOrMore>
        <ref name="link"/>
      </zeroOrMore>
    </element>
  </define>
  <!-- syntax sugar for stmt[@role='purpose'] for "Objective/s" etc. -->
  <define name="purpose">
    <element name="purpose">
      <ref name="prose"/>
    </element>
  </define>
  <!-- syntax sugar for stmt[@role='guidance'] for "Supplemental Guidance" etc. -->
  <define name="guidance">
    <element name="guidance">
      <ref name="prose"/>
    </element>
  </define>
  <!-- syntax sugar for stmt[@role='decision'] -->
  <define name="decision">
    <element name="decision">
      <ref name="prose"/>
    </element>
  </define>
  <!-- syntax sugar for stmt[@role='information'], other-info, etc. -->
  <define name="information">
    <element name="information">
      <ref name="prose"/>
    </element>
  </define>
  <!-- syntax sugar for stmt[@role='remarks'] -->
  <define name="remarks">
    <element name="remarks">
      <ref name="prose"/>
    </element>
  </define>
  <define name="prose">
    <zeroOrMore>
      <choice>
        <ref name="ul"/>
        <ref name="ol"/>
        <ref name="p"/>
        <ref name="pre"/>
      </choice>
    </zeroOrMore>
  </define>
  <!--
    cluster = element cluster { control+ | prop+ | ref+ }
    on group, not(*/@name != */@name) ie all names must be the same
  -->
  <define name="references">
    <element name="references">
      <oneOrMore>
        <ref name="ref"/>
      </oneOrMore>
    </element>
  </define>
  <define name="ref">
    <element name="ref">
      <ref name="idAttr"/>
      <zeroOrMore>
        <choice>
          <ref name="std"/>
          <ref name="citation"/>
          <ref name="prose"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!-- add mixed-citation or equivalent -->
  <define name="std">
    <element name="std">
      <optional>
        <attribute name="href">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <ref name="mix"/>
    </element>
  </define>
  <define name="citation">
    <element name="citation">
      <optional>
        <attribute name="href">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <ref name="mix"/>
    </element>
  </define>
  <!-- whatnot includes 'semantical' elements along with the inline mix -->
  <define name="p">
    <element name="p">
      <ref name="idAttr"/>
      <ref name="typeAttr"/>
      <ref name="whatnot"/>
    </element>
  </define>
  <define name="pre">
    <element name="pre">
      <ref name="idAttr"/>
      <ref name="mix"/>
    </element>
  </define>
  <define name="ol">
    <element name="ol">
      <oneOrMore>
        <element name="li">
          <ref name="idAttr"/>
          <ref name="typeAttr"/>
          <zeroOrMore>
            <choice>
              <ref name="whatnot"/>
              <ref name="ol"/>
              <ref name="ul"/>
            </choice>
          </zeroOrMore>
        </element>
      </oneOrMore>
    </element>
  </define>
  <define name="ul">
    <element name="ul">
      <oneOrMore>
        <element name="li">
          <ref name="idAttr"/>
          <ref name="typeAttr"/>
          <zeroOrMore>
            <choice>
              <ref name="whatnot"/>
              <ref name="ol"/>
              <ref name="ul"/>
            </choice>
          </zeroOrMore>
        </element>
      </oneOrMore>
    </element>
  </define>
  <!-- html! -->
  <define name="whatnot">
    <zeroOrMore>
      <choice>
        <ref name="semantical"/>
        <ref name="mix"/>
      </choice>
    </zeroOrMore>
  </define>
  <define name="mix">
    <zeroOrMore>
      <choice>
        <ref name="inlines"/>
        <text/>
      </choice>
    </zeroOrMore>
  </define>
  <define name="inlines">
    <choice>
      <ref name="q"/>
      <ref name="code"/>
      <ref name="em"/>
      <ref name="xref"/>
      <ref name="i"/>
      <ref name="b"/>
    </choice>
  </define>
  <define name="em">
    <element name="em">
      <ref name="mix"/>
    </element>
  </define>
  <define name="i">
    <element name="i">
      <ref name="mix"/>
    </element>
  </define>
  <define name="b">
    <element name="b">
      <ref name="mix"/>
    </element>
  </define>
  <define name="xref">
    <element name="xref">
      <optional>
        <attribute name="href"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="q"/>
          <ref name="code"/>
          <element name="em">
            <text/>
          </element>
          <text/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="q">
    <element name="q">
      <text/>
    </element>
  </define>
  <!-- A bit of code (perhaps capable of evaluation in the correct context) -->
  <define name="code">
    <element name="code">
      <optional>
        <attribute name="type"/>
      </optional>
      <ref name="mix"/>
    </element>
  </define>
  <!-- not html! -->
  <define name="semantical">
    <choice>
      <ref name="withdrawn"/>
      <ref name="assign"/>
      <ref name="select"/>
    </choice>
  </define>
  <!-- A placeholder status report typically with a cross-reference -->
  <define name="withdrawn">
    <element name="withdrawn">
      <zeroOrMore>
        <choice>
          <ref name="inlines"/>
          <text/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!-- A value to be assigned by responder, possibly via a param (parameter) or parameter declaration -->
  <define name="assign">
    <element name="assign">
      <optional>
        <ref name="paramAttr"/>
      </optional>
      <ref name="mix"/>
    </element>
  </define>
  <!-- A selection to be made by responder -->
  <define name="select">
    <element name="select">
      <optional>
        <ref name="paramAttr"/>
      </optional>
      <zeroOrMore>
        <ref name="choice"/>
      </zeroOrMore>
    </element>
  </define>
  <!--
    Within a selection, a choice
    unlike 'value', choice may have inline stuff as well as 'assign' elements
  -->
  <define name="choice">
    <element name="choice">
      <zeroOrMore>
        <choice>
          <ref name="assign"/>
          <ref name="mix"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="idAttr">
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
  </define>
  <!-- collapsing 'names' and 'types' as classes, HTML-style -->
  <define name="nameAttr">
    <optional>
      <attribute name="class"/>
    </optional>
  </define>
  <define name="typeAttr">
    <optional>
      <attribute name="class"/>
    </optional>
  </define>
  <define name="contextAttr">
    <attribute name="context"/>
  </define>
  <define name="paramAttr">
    <optional>
      <attribute name="use"/>
    </optional>
  </define>
  <define name="relAttr">
    <optional>
      <attribute name="rel"/>
    </optional>
  </define>
  <define name="hrefAttr">
    <attribute name="href"/>
  </define>
  <!-- nameAttr = attribute name { xsd:NCName } -->
  <!---->
  <define name="profile">
    <element name="profile">
      <oneOrMore>
        <ref name="invoke"/>
      </oneOrMore>
      <zeroOrMore>
        <ref name="mod"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="invoke">
    <element name="invoke">
      <ref name="hrefAttr"/>
      <group>
        <optional>
          <ref name="include"/>
        </optional>
        <optional>
          <ref name="exclude"/>
        </optional>
      </group>
    </element>
  </define>
  <define name="include">
    <element name="include">
      <choice>
        <ref name="all"/>
        <oneOrMore>
          <choice>
            <ref name="call"/>
            <ref name="filter"/>
          </choice>
        </oneOrMore>
      </choice>
    </element>
  </define>
  <!-- 'all' or 'filter' make sense for inclusions but not exclusions -->
  <define name="exclude">
    <element name="exclude">
      <oneOrMore>
        <ref name="call"/>
      </oneOrMore>
    </element>
  </define>
  <define name="mod">
    <element name="mod">
      <ref name="contextAttr"/>
    </element>
  </define>
  <define name="all">
    <element name="all">
      <empty/>
    </element>
  </define>
  <define name="call">
    <element name="call">
      <attribute name="key"/>
      <text/>
    </element>
  </define>
  <define name="filter">
    <element name="filter">
      <attribute name="key"/>
      <text/>
    </element>
  </define>
</grammar>
