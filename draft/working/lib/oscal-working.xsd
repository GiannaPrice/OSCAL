<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://scap.nist.gov/schema/oscal" xmlns:oscal="http://scap.nist.gov/schema/oscal">
  <!-- We can have a catalog, or we can have only declarations for catalogs -->
  <!--
    start = element oscal-catalog { declarations, catalog } 
    have initial sections
    declare   - declares local parameters and settings including constraints on controls
                (enumerated values for properties, regexes and what not)
    also declares bindings to authorities (e.g. sources for transclusion/comparison)?
  -->
  <xs:element name="catalog">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="oscal:title"/>
        <xs:element minOccurs="0" ref="oscal:declarations"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:div"/>
        <xs:choice>
          <xs:element maxOccurs="unbounded" ref="oscal:group"/>
          <xs:element maxOccurs="unbounded" ref="oscal:control"/>
        </xs:choice>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:div"/>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- do we want a 'runtime' element for runtime bindings? such as parameters -->
  <!--
    declarations includes declarations for control types, parameters (names/types),
    authorities (source data for transclusion etc. etc.)
  -->
  <xs:element name="declarations">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="oscal:decls">
          <xs:attribute name="href"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="decls">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="oscal:parameter"/>
      <xs:element ref="oscal:property"/>
      <xs:element ref="oscal:statement"/>
    </xs:choice>
  </xs:complexType>
  <!-- parameter declarations expose names and default values for parameters within the control type -->
  <xs:element name="parameter">
    <xs:complexType>
      <xs:choice minOccurs="0">
        <xs:element ref="oscal:regex"/>
        <xs:element ref="oscal:value"/>
        <xs:element maxOccurs="unbounded" ref="oscal:choice"/>
      </xs:choice>
      <xs:attributeGroup ref="oscal:nameAttr"/>
      <xs:attributeGroup ref="oscal:contextAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- property may contain only id, only regex, both id and regex, or (sequence of) values -->
  <xs:element name="property">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:required"/>
        <xs:choice>
          <xs:sequence>
            <xs:element minOccurs="0" ref="oscal:identifier"/>
            <xs:element minOccurs="0" ref="oscal:regex"/>
          </xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:value"/>
        </xs:choice>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:nameAttr"/>
      <xs:attributeGroup ref="oscal:contextAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="identifier">
    <xs:complexType/>
  </xs:element>
  <!--
    on 'property and possibly 'parameter',
    element limit { nameAttr, text } w/ @type= upper-bound-inclusive, lower-bound-exclusive, (w/ inclusive/exclusive etc.)
  -->
  <xs:element name="regex" type="xs:string"/>
  <xs:element name="value" type="xs:string"/>
  <!-- element autonum { text } -->
  <xs:element name="statement">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:required"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:nameAttr"/>
      <xs:attributeGroup ref="oscal:contextAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="required">
    <xs:complexType/>
  </xs:element>
  <!-- now for elements themselves -->
  <xs:element name="group">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:prop"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:anyKindofStatement"/>
        <xs:choice>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:group"/>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:control"/>
        </xs:choice>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:div"/>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:idAttr"/>
      <xs:attributeGroup ref="oscal:typeAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="div">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="oscal:title"/>
        <xs:group ref="oscal:prose"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:div"/>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:idAttr"/>
      <xs:attributeGroup ref="oscal:typeAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="control">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:prop"/>
        <xs:element minOccurs="0" ref="oscal:desc"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:anyKindofStatement"/>
        <xs:group minOccurs="0" ref="oscal:extensions"/>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:idAttr"/>
      <xs:attributeGroup ref="oscal:typeAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="title">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:q"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    param is like its declaration, but simpler
    permits bindings to assign and select elements w/in controls
    i.e. local override of a default assignment in a parameter declaration
    or on-the-fly declaration of new parameters for a control
    (since params are not currently required to be declared
  -->
  <!-- element param { nameAttr, mix } -->
  <xs:element name="prop">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="oscal:whatnot">
          <xs:attributeGroup ref="oscal:nameAttr"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- on prop, not(@name = ../(* except current())/@name) -->
  <xs:element name="desc">
    <xs:complexType>
      <xs:group ref="oscal:prose"/>
    </xs:complexType>
  </xs:element>
  <!--
    stmt is a bit of controlled prose: its title is implicit in its name
    e.g. stmt[@name='objectives'] might be displayed with title "Objectives:"
  -->
  <xs:element name="anyKindofStatement" abstract="true"/>
  <xs:element name="stmt" substitutionGroup="oscal:anyKindofStatement">
    <xs:complexType>
      <xs:group ref="oscal:prose"/>
      <xs:attributeGroup ref="oscal:nameAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- syntax sugar for stmt[@role='purpose'] for "Objective/s" etc. -->
  <xs:element name="purpose" substitutionGroup="oscal:anyKindofStatement">
    <xs:complexType>
      <xs:group ref="oscal:prose"/>
    </xs:complexType>
  </xs:element>
  <!-- syntax sugar for stmt[@role='guidance'] for "Supplemental Guidance" etc. -->
  <xs:element name="guidance" substitutionGroup="oscal:anyKindofStatement">
    <xs:complexType>
      <xs:group ref="oscal:prose"/>
    </xs:complexType>
  </xs:element>
  <!-- syntax sugar for stmt[@role='decision'] -->
  <xs:element name="decision" substitutionGroup="oscal:anyKindofStatement">
    <xs:complexType>
      <xs:group ref="oscal:prose"/>
    </xs:complexType>
  </xs:element>
  <!-- syntax sugar for stmt[@role='information'], other-info, etc. -->
  <xs:element name="information" substitutionGroup="oscal:anyKindofStatement">
    <xs:complexType>
      <xs:group ref="oscal:prose"/>
    </xs:complexType>
  </xs:element>
  <!-- syntax sugar for stmt[@role='remarks'] -->
  <xs:element name="remarks" substitutionGroup="oscal:anyKindofStatement">
    <xs:complexType>
      <xs:group ref="oscal:prose"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="prose">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:ul"/>
        <xs:element ref="oscal:ol"/>
        <xs:element ref="oscal:p"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!--
    cluster = element cluster { control+ | prop+ | ref+ }
    on group, not(*/@name != */@name) ie all names must be the same
  -->
  <xs:group name="extensions">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="oscal:group"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="references">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:ref"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ref">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:std"/>
        <xs:element ref="oscal:citation"/>
      </xs:choice>
      <xs:attributeGroup ref="oscal:idAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- add mixed-citation or equivalent -->
  <xs:element name="std">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
      <xs:attribute name="href" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="citation">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
      <xs:attribute name="href" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="p">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="oscal:whatnot">
          <xs:attributeGroup ref="oscal:idAttr"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ol">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="li" type="oscal:whatnot"/>
  <xs:element name="ul">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="idAttr">
    <xs:attribute name="id" type="xs:ID"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="nameAttr">
    <xs:attribute name="role"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="typeAttr">
    <xs:attribute name="type"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="contextAttr">
    <xs:attribute name="where" use="required"/>
  </xs:attributeGroup>
  <!-- nameAttr = attribute name { xsd:NCName } -->
  <!-- html! -->
  <xs:complexType name="whatnot" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="oscal:semantical"/>
      <xs:element ref="oscal:ol"/>
      <xs:group ref="oscal:mix"/>
    </xs:choice>
  </xs:complexType>
  <xs:group name="mix">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:inlines"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="inlines" abstract="true"/>
  <xs:element name="em" substitutionGroup="oscal:inlines" type="xs:string"/>
  <xs:element name="xref" substitutionGroup="oscal:inlines">
    <xs:complexType mixed="true">
      <xs:attribute name="href"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="q" substitutionGroup="oscal:inlines" type="xs:string"/>
  <!-- A bit of code (perhaps capable of evaluation in the correct context) -->
  <xs:element name="code" substitutionGroup="oscal:inlines">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
      <xs:attribute name="type"/>
    </xs:complexType>
  </xs:element>
  <!-- not html! -->
  <xs:element name="semantical" abstract="true"/>
  <!-- A placeholder status report typically with a cross-reference -->
  <xs:element name="withdrawn" substitutionGroup="oscal:semantical">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:inlines"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- A value to be assigned by responder, possibly via a param (parameter) or parameter declaration -->
  <xs:element name="assign" substitutionGroup="oscal:semantical">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
      <xs:attributeGroup ref="oscal:paramAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- A selection to be made by responder -->
  <xs:element name="select" substitutionGroup="oscal:semantical">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:choice"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:paramAttr"/>
    </xs:complexType>
  </xs:element>
  <!--
    Within a selection, a choice
    unlike 'value', choice may have inline stuff as well as 'assign' elements
  -->
  <xs:element name="choice">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:assign"/>
        <xs:group ref="oscal:mix"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="paramAttr">
    <xs:attribute name="use-param"/>
  </xs:attributeGroup>
</xs:schema>
