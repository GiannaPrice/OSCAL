default namespace = "http://scap.nist.gov/schema/oscal"

# We can have a catalog, or we can have only declarations for catalogs
start = (catalog | declarations | collection)

# Also we have an alias for 'catalog', namely 'collection', used for ad-hoc collections of controls

# start = element oscal-catalog { declarations, catalog } 
# have initial sections
# declare   - declares local parameters and settings including constraints on controls
#             (enumerated values for properties, regexes and what not)
# also declares bindings to authorities (e.g. sources for transclusion/comparison)?

#keeping these together until we have differentiating requirements
collection-contents =  (title, declarations?, (section | group | control)*, references?)

catalog    = element catalog { collection-contents } 

collection = element collection { collection-contents }

# declarations includes declarations for control types, parameters (names/types),
# authorities (source data for transclusion etc. etc.)
declarations = ( element declarations { hrefAttr?, decls } )

decls = (parameter_decl | property_decl | statement_decl | feature_decl | link_decl)*

# parameter declarations expose names and default values for parameters within the control type
parameter_decl   = element parameter {
  nameAttr, contextAttr, singleton?, (choice+)? }

# property may contain only id, only regex, both id and regex, or (sequence of) values
property_decl =
  element property {
    nameAttr, contextAttr, singleton?, required?,
    element identifier { empty }?,
    (regex | value* )
  }

# statement declaration
statement_decl =
  element statement { nameAttr, contextAttr, singleton?, required? }

# feature declaration
feature_decl =
  element feature { nameAttr, contextAttr, singleton?, required? }

# link declaration
link_decl =
  element link_ {
    nameAttr, contextAttr, singleton?, required? }

singleton = element singleton { empty }

required =  element required { empty }

# on 'property and possibly 'parameter',
# element limit { nameAttr, text } w/ @type= upper-bound-inclusive, lower-bound-exclusive, (w/ inclusive/exclusive etc.)

regex = element regex { text }
value = element value { ( \inherit | autonum | text )* }
\inherit = element inherit { attribute from { text }?, text }
autonum = element autonum { text }

# done with declarations - controls, subcontrols and groups are not declared
# (constrained) at the OSCAL layer so they don't get declaration elements.

# Now for the contents of the OSCAL doc proper ...

section = element section { idAttr, typeAttr,
  title, prose, (section | group)*, references? }

# groups may contain more groups, controls or subcontrols
# But controls should not appear in controls (even grouped)
# And subcontrols must not appear without control ancestors
# ... these constraints validated w/ Schematron

group = element group {
  idAttr, typeAttr,
  title?, control-components, (group | control)+, references? }

control-components = (prop | param | anyKindofStatement | feature | link)*

control =
  element control {
    idAttr, typeAttr, title?,
    (control-components | subcontrol)*,
    references?
  }

subcontrol =
  element subcontrol {
    idAttr, typeAttr, title?,
    control-components,
    references? 
  }

feature =
  element feat {
    idAttr, typeAttr, title?,
    control-components
  }

title = element title { (text | q)* }

# param is like its declaration, but simpler
# permits bindings to assign and select elements w/in controls
# i.e. local override of a default assignment in a parameter declaration
# or on-the-fly declaration of new parameters for a control
# (since params are not currently required to be declared

link    = element link { relAttr, hrefAttr, mix }

# Can't inject param values into parameter settings, okay?
param   = element param { nameAttr, targetAttr, mix }

prop =
  element prop {
    nameAttr,
    whatnot
  }
# on prop, not(@name = ../(* except current())/@name)

# stmt is a bit of controlled prose: its title is implicit in its name
# e.g. stmt[@name='objectives'] might be displayed with title "Objectives:"

# for harder wiring: anyKindofStatement = ( stmt | desc | purpose | guidance | information | remarks )*
# of course that complicates the declarations model ...
# declaring as zeroOrMore/choice avoids XSD substitution group (in Trang)
anyKindofStatement = stmt*

stmt =
  element stmt {
    nameAttr?,
    (prose | link)* }

# syntax sugar for stmt[@role='purpose'] for "Objective/s" etc.
# purpose =
#   element purpose {
#     prose }

# syntax sugar for stmt[@role='guidance'] for "Supplemental Guidance" etc.
# guidance =
#   element guidance {
#     prose }

# syntax sugar for stmt[@role='decision']
# decision =
#   element decision {
#     prose }

# syntax sugar for stmt[@role='information'], other-info, etc.
# information =
#   element information {
#     prose }

# syntax sugar for stmt[@role='remarks']
# remarks =
#   element remarks {
#     prose }


prose = ( ul | ol | p | pre )*

references = element references { ref+ }

# JATS-like references
ref = element ref { idAttr, (std | citation | prose )* }

# analogous to JATS mixed-citation[@citation-type='standard'] or equivalent
std =  element std {
         attribute href { xsd:anyURI }?,
         mix
  }

# analogous to JATS mixed-citation
citation =  element citation {
         attribute href { xsd:anyURI }?,
         mix
  }


# We can map more html in if/as needed

p = element p { idAttr, typeAttr, whatnot }

pre = element pre { idAttr, mix }

ol = element ol { element li { idAttr, typeAttr, (whatnot | ol | ul )*  }+ }

ul = element ul { element li { idAttr, typeAttr, (whatnot | ol | ul )* }+ }

# whatnot includes 'semantical' elements along with the inline mix

whatnot = (
  semantical | mix )*

mix = (inlines | text)*

# declaring as zeroOrMore/choice avoids XSD substitution group
inlines = (  q | code | em | xref | i | b | span )*

em = element em { mix }
i =  element i  { mix }
b =  element b  { mix }

xref = element a { attribute href { text }?, ( q | code | element em { text } | text )* }

q = element q { text }

# A bit of code (perhaps capable of evaluation in the correct context)
code = element code { attribute type { text }?, mix }

# An arbitrary span
span = element span { classAttr, mix }

# not html!

# declaring as zeroOrMore/choice avoids XSD substitution group
semantical = ( withdrawn | assign | select )*

# A placeholder status report typically with a cross-reference
withdrawn = element withdrawn { (inlines | text)* }

# A value to be assigned by responder, possibly via a param (parameter) or parameter declaration
assign = element assign { idAttr, mix }

# A selection to be made by responder
select = element select { idAttr, choice* }

# Within a selection, a choice
# unlike 'value', choice may have inline stuff as well as 'assign' elements
choice = element choice { (assign | mix)* }


idAttr      = attribute id { xsd:ID }?

targetAttr      = attribute target { xsd:IDREFS }?

# collapsing 'names' and 'types' as classes, HTML-style

nameAttr    = attribute class { text }?

typeAttr    = attribute class { text }?

classAttr   = attribute class { text }?

contextAttr = attribute context { text }

relAttr = attribute rel { text }?

hrefAttr = attribute href { text }?

#nameAttr = attribute name { xsd:NCName }
